// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251006093925_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("backend.Models.CarriageNoiseAndTemp", b =>
                {
                    b.Property<int>("CarriageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<float>("NoiseLevel")
                        .HasColumnType("REAL");

                    b.Property<float>("Temperature")
                        .HasColumnType("REAL");

                    b.HasKey("CarriageId", "Date");

                    b.ToTable("CarriageNoiseAndTemps");

                    b.HasData(
                        new
                        {
                            CarriageId = 1,
                            Date = new DateTime(2025, 10, 6, 11, 39, 25, 309, DateTimeKind.Local).AddTicks(7802),
                            NoiseLevel = 30f,
                            Temperature = 22f
                        },
                        new
                        {
                            CarriageId = 1,
                            Date = new DateTime(2025, 10, 6, 11, 39, 25, 309, DateTimeKind.Local).AddTicks(8266),
                            NoiseLevel = 40f,
                            Temperature = 24f
                        });
                });

            modelBuilder.Entity("backend.Models.CarriageSeats", b =>
                {
                    b.Property<int>("CarriageId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("OcupiedSeats")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OcupiedSeatsBitMap")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalSeats")
                        .HasColumnType("INTEGER");

                    b.HasKey("CarriageId", "Date");

                    b.ToTable("CarriageSeats");

                    b.HasData(
                        new
                        {
                            CarriageId = 1,
                            Date = new DateTime(2025, 10, 6, 11, 39, 25, 307, DateTimeKind.Local).AddTicks(9040),
                            OcupiedSeats = 0,
                            OcupiedSeatsBitMap = 0,
                            TotalSeats = 24
                        },
                        new
                        {
                            CarriageId = 1,
                            Date = new DateTime(2025, 10, 6, 11, 39, 25, 309, DateTimeKind.Local).AddTicks(3939),
                            OcupiedSeats = 1,
                            OcupiedSeatsBitMap = 1,
                            TotalSeats = 24
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
